[{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Secure Shell (SSH) Client for R","text":"Windows MacOS can install binary package directly CRAN: Installation source requires libssh (libssh2). Debian Ubuntu use libssh-dev: Fedora need libssh-devel: CentOS / RHEL install libssh-devel via EPEL: OS-X use libssh Homebrew:","code":"install.packages(\"ssh\") sudo apt-get install -y libssh-dev sudo yum install libssh-devel sudo yum install epel-release sudo yum install libssh-devel brew install libssh"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"connecting-to-an-ssh-server","dir":"Articles","previous_headings":"","what":"Connecting to an SSH server","title":"Secure Shell (SSH) Client for R","text":"First create ssh session connecting SSH server. established, session closed automatically garbage collector object goes scope R quits. can also manually close using ssh_disconnect() strictly needed.","code":"session <- ssh_connect(\"jeroen@dev.opencpu.org\") print(session) <ssh session> jeroen@dev.opencpu.org:22 (connected) server: 90:eb:52:6b:ee:fc:de:f1:c0:66:6c:53:82:dd:ce:80:d3:85:1e:d8"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication","title":"Secure Shell (SSH) Client for R","text":"client attempts use following authentication methods (order) one succeeds: try key privkey argument ssh_connect() specified ssh-agent available, try private key ssh-agent try user key specified ~/.ssh/config default locations: ~/.ssh/id_ed25519, ~/.ssh/id_ecdsa, ~/.ssh/id_rsa, .ssh/id_dsa. Try challenge-response password authentication (permitted server) Try plain password authentication (permitted server) debug authentication set verbosity least level 2 3: Tools setting debugging ssh keys provided via credentials package.","code":"session <- ssh_connect(\"jeroen@dev.opencpu.org\", verbose = 2) ssh_socket_connect: Nonblocking connection socket: 7 ssh_connect: Socket connecting, now waiting for the callbacks to work socket_callback_connected: Socket connection callback: 1 (0) ssh_client_connection_callback: SSH server banner: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 ssh_analyze_banner: Analyzing banner: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 ssh_analyze_banner: We are talking to an OpenSSH client version: 7.2 (70200) ssh_packet_dh_reply: Received SSH_KEXDH_REPLY ssh_client_curve25519_reply: SSH_MSG_NEWKEYS sent ssh_packet_newkeys: Received SSH_MSG_NEWKEYS ssh_packet_newkeys: Signature verified and valid ssh_packet_userauth_failure: Access denied. Authentication that can continue: publickey ssh_packet_userauth_failure: Access denied. Authentication that can continue: publickey ssh_agent_get_ident_count: Answer type: 12, expected answer: 12 ssh_userauth_publickey_auto: Successfully authenticated using /Users/jeroen/.ssh/id_rsa ssh_key_info() $key [1] \"/Users/jeroen/.ssh/id_ed25519\"  $pubkey [1] \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILGN+5tybmwKhcxvnwPSKlrp39Ni1gMD0UhV4gCxHg/x\""},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"execute-script-or-command","dir":"Articles","previous_headings":"","what":"Execute Script or Command","title":"Secure Shell (SSH) Client for R","text":"Run command script host block runs. default stdout stderr steamed directly back client. function returns exit status remote command (hence automatically error unsuccessful exit status). can also run script consists multiple commands.","code":"out <- ssh_exec_wait(session, command = 'whoami') jeroen print(out) [1] 0 ssh_exec_wait(session, command = c(   'curl -O https://cran.r-project.org/src/contrib/Archive/jsonlite/jsonlite_1.4.tar.gz',   'R CMD check jsonlite_1.4.tar.gz',   'rm -f jsonlite_1.4.tar.gz' )) % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1071k  100 1071k    0     0   654k      0  0:00:01  0:00:01 --:--:--  654k * using log directory '/home/jeroen/jsonlite.Rcheck' * using R version 3.4.3 (2017-11-30) * using platform: x86_64-pc-linux-gnu (64-bit) * using session charset: ASCII * checking for file 'jsonlite/DESCRIPTION' ... OK * this is package 'jsonlite' version '1.4' * checking package namespace information ... OK * checking package dependencies ... ..."},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"capturing-output","dir":"Articles","previous_headings":"Execute Script or Command","what":"Capturing output","title":"Secure Shell (SSH) Client for R","text":"ssh_exec_internal() convenient wrapper ssh_exec_wait() buffers output steams returns raw vector. Also raises error default remote command successful. function useful running remote command want use â€™s output executed locally.","code":"out <- ssh_exec_internal(session, \"R -e 'rnorm(10)'\") print(out$status) [1] 0 cat(rawToChar(out$stdout)) R version 4.1.2 (2021-11-01) -- \"Bird Hippie\" Copyright (C) 2021 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details.    Natural language support but running in an English locale  R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications.  Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R.  > rnorm(10)  [1] -0.3837970  0.9754719  0.9999716 -0.2634097  0.1845797 -0.5664418  [7]  0.6975547 -0.2063897 -0.7263869  2.3826802 >  >"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"using-sudo","dir":"Articles","previous_headings":"Execute Script or Command","what":"Using sudo","title":"Secure Shell (SSH) Client for R","text":"Note exec functions non interactive prompt sudo password. trick use -S reads password stdin: careful hardcoding passwords!","code":"command <- 'echo \"mypassword!\" | sudo -s -S apt-get update -y' out <- ssh_exec_wait(session, command)"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"transfer-files-via-scp","dir":"Articles","previous_headings":"","what":"Transfer Files via SCP","title":"Secure Shell (SSH) Client for R","text":"Upload download files via SCP. Directories automatically traversed scp -r.","code":"# Upload a file to the server file_path <- R.home(\"COPYING\") scp_upload(session, file_path) # Download the file back and verify it is the same scp_download(session, \"COPYING\", to = tempdir()) tools::md5sum(file_path) tools::md5sum(file.path(tempdir(), \"COPYING\"))"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"hosting-a-tunnel","dir":"Articles","previous_headings":"","what":"Hosting a Tunnel","title":"Secure Shell (SSH) Client for R","text":"Opens port machine tunnel traffic custom target host via SSH server. function blocks tunnel active. Use tunnel connecting localhost:5555 separate process. tunnel can used automatically closed client disconnects.","code":"ssh_tunnel(session, port = 5555, target = \"ds043942.mongolab.com:43942\")"},{"path":"https://docs.ropensci.org/ssh/articles/intro.html","id":"disconnecting","dir":"Articles","previous_headings":"","what":"Disconnecting","title":"Secure Shell (SSH) Client for R","text":"done session disconnect: forgot disconnect, garbage collector (warning).","code":"ssh_disconnect(session)"},{"path":"https://docs.ropensci.org/ssh/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/ssh/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J (2024). ssh: Secure Shell (SSH) Client R. R package version 0.9.1, https://docs.ropensci.org/ssh/https://ropensci.r-universe.dev/ssh.","code":"@Manual{,   title = {ssh: Secure Shell (SSH) Client for R},   author = {Jeroen Ooms},   year = {2024},   note = {R package version 0.9.1},   url = {https://docs.ropensci.org/ssh/ https://ropensci.r-universe.dev/ssh}, }"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"ssh","dir":"","previous_headings":"","what":"Secure Shell (SSH) Client for R","title":"Secure Shell (SSH) Client for R","text":"Secure Shell (SSH) Client R","code":""},{"path":"https://docs.ropensci.org/ssh/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Secure Shell (SSH) Client for R","text":"package available CRAN can installed via: Alternatively can installed source using devtools: Installation source MacOS Linux requires libssh (original libssh, unrelated libssh2 library). Debian Ubuntu use libssh-dev: Fedora need libssh-devel: CentOS / RHEL install libssh-devel via EPEL: OS-X use libssh Homebrew: Using conda (need conda R environment conda create -n Renv r-base r-essentials) issues conda installation please submit issue conda-forge/r-ssh-feedstock","code":"install.packages('ssh') remotes::install_github('ropensci/ssh') sudo apt-get install -y libssh-dev sudo yum install libssh-devel sudo yum install epel-release sudo yum install libssh-devel brew install libssh conda install --channel conda-forge r-ssh"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Secure Shell (SSH) Client for R","text":"First create ssh session connecting SSH server. can either use private key passphrase authentication: can use session subsequent ssh functions .","code":"session <- ssh_connect(\"jeroen@dev.opencpu.org\")"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"run-a-command","dir":"","previous_headings":"Getting Started","what":"Run a command","title":"Secure Shell (SSH) Client for R","text":"Run command script host streaming stdout stderr directly client. want capture stdout/stderr:","code":"ssh_exec_wait(session, command = c(   'curl -fOL https://cloud.r-project.org/src/contrib/Archive/jsonlite/jsonlite_1.5.tar.gz',   'R CMD check jsonlite_1.5.tar.gz',   'rm -f jsonlite_1.5.tar.gz' )) out <- ssh_exec_internal(session, \"R -e 'rnorm(100)'\") cat(rawToChar(out$stdout))"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"using-sudo","dir":"","previous_headings":"Getting Started > Run a command","what":"Using â€˜sudoâ€™","title":"Secure Shell (SSH) Client for R","text":"Note exec functions non interactive prompt sudo password. trick use -S reads password stdin: careful hardcoding passwords!","code":"out <- ssh_exec_wait(session, 'echo \"mypassword!\" | sudo -s -S apt-get update -y')"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"uploading-and-downloading-via-scp","dir":"","previous_headings":"Getting Started","what":"Uploading and Downloading via SCP","title":"Secure Shell (SSH) Client for R","text":"Upload download files via SCP. Directories automatically traversed scp -r.","code":"# Upload a file to the server file_path <- R.home(\"COPYING\") scp_upload(session, file_path) # Download the file back and verify it is the same scp_download(session, \"COPYING\", to = tempdir()) tools::md5sum(file_path) tools::md5sum(file.path(tempdir(), \"COPYING\"))"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"create-a-tunnel","dir":"","previous_headings":"Getting Started","what":"Create a Tunnel","title":"Secure Shell (SSH) Client for R","text":"Opens port machine tunnel traffic custom target host via SSH server. function blocks tunnel active. Use tunnel connecting localhost:5555 separate process. tunnel can used automatically closed client disconnects.","code":"ssh_tunnel(session, port = 5555,target = \"ds043942.mongolab.com:43942\")"},{"path":"https://docs.ropensci.org/ssh/index.html","id":"disconnect","dir":"","previous_headings":"Getting Started","what":"Disconnect","title":"Secure Shell (SSH) Client for R","text":"done session disconnect: forgot disconnect, garbage collector (warning).","code":"ssh_disconnect(session)"},{"path":"https://docs.ropensci.org/ssh/reference/scp.html","id":null,"dir":"Reference","previous_headings":"","what":"SCP (Secure Copy) â€” scp","title":"SCP (Secure Copy) â€” scp","text":"Upload download files /SSH server via scp protocol. Directories files argument automatically traversed uploaded / downloaded recursively.","code":""},{"path":"https://docs.ropensci.org/ssh/reference/scp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCP (Secure Copy) â€” scp","text":"","code":"scp_download(session, files, to = \".\", verbose = TRUE)  scp_upload(session, files, to = \".\", verbose = TRUE)"},{"path":"https://docs.ropensci.org/ssh/reference/scp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCP (Secure Copy) â€” scp","text":"session ssh connection created ssh_connect() files path files directory transfer existing directory destination files copied verbose print progress copying files","code":""},{"path":"https://docs.ropensci.org/ssh/reference/scp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SCP (Secure Copy) â€” scp","text":"Note syntax slightly different scp command line tool parameter always target directory files copied . exist, created. files parameter scp_upload() vectorised hence files directories recursively uploaded directory. scp_download() files parameter must single string may contain wildcards. default path = \".\" means files get downloaded current working directory uploaded user home directory server.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ssh/reference/scp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCP (Secure Copy) â€” scp","text":"","code":"if (FALSE) { # recursively upload files and directories session <- ssh_connect(\"dev.opencpu.org\") files <- c(R.home(\"doc\"), R.home(\"COPYING\")) scp_upload(session, files, to = \"~/target\")  # download it back scp_download(session, \"~/target/*\", to = tempdir())  # delete it from the server ssh_exec_wait(session, command = \"rm -Rf ~/target\") ssh_disconnect(session) }"},{"path":"https://docs.ropensci.org/ssh/reference/ssh.html","id":null,"dir":"Reference","previous_headings":"","what":"SSH Client â€” ssh_connect","title":"SSH Client â€” ssh_connect","text":"Create ssh session using ssh_connect(). session can used execute commands, scp files setup tunnel.","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SSH Client â€” ssh_connect","text":"","code":"ssh_connect(host, keyfile = NULL, passwd = askpass, verbose = FALSE)  ssh_session_info(session)  ssh_disconnect(session)  libssh_version()"},{"path":"https://docs.ropensci.org/ssh/reference/ssh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SSH Client â€” ssh_connect","text":"host ssh server string form [user@]hostname[:@port]. ipv6 hostname wrapped brackets like : [2001:db8::1]:80. keyfile path private key file. Must OpenSSH format (see details) passwd either string callback function password prompt verbose either TRUE/FALSE value 0 4 indicating log level: 0: logging, 1: warnings, 2: protocol, 3: packets 4: full stack trace. session ssh connection created ssh_connect()","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SSH Client â€” ssh_connect","text":"client first tries authenticate using private key, either ssh-agent /.ssh/id_rsa user home directory. fails falls back challenge-response (interactive) password auth allowed server. passwd parameter can used provide passphrase callback function ask prompt user passphrase needed. session automatically disconnected session object removed R exits can also use ssh_disconnect(). Windows users: private key must OpenSSH PEM format. open text editor first line must : -----BEGIN RSA PRIVATE KEY-----. convert Putty PKK key, open PuttyGen utility go Conversions -> Export OpenSSH.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ssh/reference/ssh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SSH Client â€” ssh_connect","text":"","code":"if (FALSE) { session <- ssh_connect(\"dev.opencpu.org\") ssh_exec_wait(session, command = \"whoami\") ssh_disconnect(session) }"},{"path":"https://docs.ropensci.org/ssh/reference/ssh_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"Managing Your SSH Key â€” ssh_credentials","title":"Managing Your SSH Key â€” ssh_credentials","text":"objects imported packages. Follow links see documentation. credentials ssh_agent_add, ssh_home, ssh_key_info, ssh_keygen, ssh_read_key","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ssh/reference/ssh_exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Remote Command â€” ssh_exec","title":"Execute Remote Command â€” ssh_exec","text":"Run command script host streaming stdout stderr directly client.","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh_exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Remote Command â€” ssh_exec","text":"","code":"ssh_exec_wait(   session,   command = \"whoami\",   std_out = stdout(),   std_err = stderr() )  ssh_exec_internal(session, command = \"whoami\", error = TRUE)"},{"path":"https://docs.ropensci.org/ssh/reference/ssh_exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Remote Command â€” ssh_exec","text":"session ssh connection created ssh_connect() command command script execute std_out callback function, filename, connection object handle stdout stream std_err callback function, filename, connection object handle stderr stream error automatically raise error exit status non-zero","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh_exec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute Remote Command â€” ssh_exec","text":"ssh_exec_wait() function remote equivalent local sys::exec_wait(). runs command script ssh server streams stdout stderr client file connection. done returns exit status remotely executed command. Similarly ssh_exec_internal() small wrapper analogous sys::exec_internal(). buffers stdout stderr output raw vector returns list along exit status. default function raises error remote command unsuccessful.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ssh/reference/ssh_exec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute Remote Command â€” ssh_exec","text":"","code":"if (FALSE) { session <- ssh_connect(\"dev.opencpu.org\") ssh_exec_wait(session, command = c(   'curl -O https://cran.r-project.org/src/contrib/jsonlite_1.5.tar.gz',   'R CMD check jsonlite_1.5.tar.gz',   'rm -f jsonlite_1.5.tar.gz' )) ssh_disconnect(session)}"},{"path":"https://docs.ropensci.org/ssh/reference/ssh_tunnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SSH tunnel â€” ssh_tunnel","title":"Create SSH tunnel â€” ssh_tunnel","text":"Opens port machine tunnel traffic custom target host via SSH server, example connect database server behind firewall.","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh_tunnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SSH tunnel â€” ssh_tunnel","text":"","code":"ssh_tunnel(session, port = 5555, target = \"rainmaker.wunderground.com:23\")"},{"path":"https://docs.ropensci.org/ssh/reference/ssh_tunnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SSH tunnel â€” ssh_tunnel","text":"session ssh connection created ssh_connect() port integer local port listen incoming connections target string target host port connect via ssh tunnel","code":""},{"path":"https://docs.ropensci.org/ssh/reference/ssh_tunnel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create SSH tunnel â€” ssh_tunnel","text":"function blocks tunnel active. Use tunnel connecting localhost:5555 separate process. tunnel can used automatically closed client disconnects. intended tunnel single connection, long running proxy server.","code":""},{"path":[]}]
